#!/bin/bash
# Script: rc/anyhooks
# Author: Ricardo Malnati
# Creation Date: 2023-10-15
# Description: Manages hooks, encryption, and language settings for AnyHooks
# Dependencies: rc/openaikey, rc/anyhookslang, rc/anyhooksver

# Defines the debug state for this script
IS_DEBUG_MODE=false

# Defines the scope for the current task
SCOPE="global"

# OS-agnostic home directory
USER_HOME_DIR=$(eval echo ~$USER)

# Debug function
display_debug_message() {
  [ ${IS_DEBUG_MODE} = true ] && echo "Debug: $1"
}

# Function to create the configuration file if it doesn't exist
create_configuration_file() {
  display_debug_message "Entering create_configuration_file function"
  # the default if not informed
  CONFIGURATION_FILE_PATH="${USER_HOME_DIR}/.anyhooksrc"
  case "$1" in
    "--global"|"-g") CONFIGURATION_FILE_PATH="${USER_HOME_DIR}/.anyhooksrc" ;;
    "--local"|"-l") CONFIGURATION_FILE_PATH="$3/.anyhooksrc" ;;
  esac
  if [ ! -f "$CONFIGURATION_FILE_PATH" ]; then
    echo "#!/bin/bash" > "$CONFIGURATION_FILE_PATH" && \
    echo "# Resource: rc/.anyhooksrc" >> "$CONFIGURATION_FILE_PATH" && \
    echo "# " >> "$CONFIGURATION_FILE_PATH" && \
    echo "# The default language is English or you can define any other " >> "$CONFIGURATION_FILE_PATH" && \
    echo "#   language name in English, for example Portuguese, " >> "$CONFIGURATION_FILE_PATH" && \
    echo "#   Spanish, French, Dutch, etc. It will affect the response of the OpenAPI.'" >> "$CONFIGURATION_FILE_PATH" && \
    echo "# " >> "$CONFIGURATION_FILE_PATH" && \
    echo "PREF_LANGUAGE=English" >> "$CONFIGURATION_FILE_PATH" && \
    echo "OPENAI_SYSTEM_CONTENT=\"You are a helpful system programmed to generate a commit message based on git diff output. Please provide the commit message with maximun of 4096 characteres, in the prefered language.\"" >> "$CONFIGURATION_FILE_PATH" && \
    echo "OPENAI_USER_CONTENT=\"Based on the following git diff output, identify and describe the changes to define the commit message.\"" >> "$CONFIGURATION_FILE_PATH"
    if [ $? -eq 0 ]; then
      echo "Configuration file created successfully."
    else
      echo "Unable to create the configuration file. Please ensure you have write permissions."
      return 1001
    fi
  else
    echo "Configuration file already exists."
  fi
  display_debug_message "Exiting create_configuration_file function"
}

# Function to check and encrypt API key file if it doesn't exist
check_encrypt_key_file() {
  display_debug_message "Entering check_encrypt_key_file function"
  ENCRYPTED_FILE="${USER_HOME_DIR}/.anyhooksopenapi.enc"
  if [ ! -f "$ENCRYPTED_FILE" ]; then
    encrypt_key
    if [ $? -eq 0 ]; then
      echo "Encrypted API key file successfully created at $ENCRYPTED_FILE."
    else
      echo "Unable to create the encrypted API key file. Please verify your encryption settings."
      return 1002
    fi
  else
    echo "Encrypted API key file already exists."
  fi
  display_debug_message "Exiting check_encrypt_key_file function"
}

# Function to deploy commit message
deploy_commit_msg() {
  display_debug_message "Entering deploy_commit_msg function"
  check_encrypt_key_file
  if [ $? -eq 0 ]; then
    SCRIPT_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
    cp "${SCRIPT_DIR}/commit-msg" "$3/.git/hooks/"
    if [ $? -eq 0 ]; then
      echo "Script hook commit-msg successfully deployed in $3."
    else
      echo "Unable to deploy the commit message hook. Please check the project directory informed [$3]."
      return 1003
    fi
  else
    echo "Failed to check or create encrypted API key file."
    return 1004
  fi
  display_debug_message "Exiting deploy_commit_msg function"
}

# Function to add hooks to the project
add_hook() {
  display_debug_message "Entering add_hook function"
  if [[ "$1" =~ "-hook" ]]; then
    for arg in "$@"; do
      if [[ "$arg" =~ "--msg|--message" ]]; then
        deploy_commit_msg $@
        if [ $? -eq 0 ]; then
          echo "Commit message deployed successfully."
        else
          echo "Unable to deploy the commit message. Please review your hook settings."
          return 1005
        fi
        break
      fi
    done
  else
    echo "Invalid command."
  fi
  display_debug_message "Exiting add_hook function"
}

# Function to encrypt API keys
encrypt_key() {
  display_debug_message "Entering encrypt_key function"
  . "anyhooksencrypt" "config" $@
  if [ $? -eq 0 ]; then
    echo "API keys encrypted successfully."
  else
    echo "Unable to encrypt API keys. Please verify your encryption parameters."
    return 1006
  fi
  display_debug_message "Exiting encrypt_key function"
}

# Function to set language
set_language() {
  display_debug_message "Entering set_language function"
  . "anyhookslang" $@
  if [ $? -eq 0 ]; then
    echo "Language set successfully."
  else
    echo "Unable to set the language. Please ensure the language is supported."
    return 1007
  fi
  display_debug_message "Exiting set_language function"
}

# Function to show version
show_version() {
  display_debug_message "Entering show_version function"
  . "anyhooksver"
  if [ $? -eq 0 ]; then
    echo "Version displayed successfully."
  else
    echo "Unable to display the version. Please check your version settings."
    return 1008
  fi
  display_debug_message "Exiting show_version function"
}

# Main function to handle parameters
main() {
  display_debug_message "Entering main function"
  create_configuration_file  # Create the configuration file if it doesn't exist
  if [ $? -eq 0 ]; then
    case $1 in
      "add")
        shift
        add_hook "$@"
        ;;
      "config")
        shift
        create_configuration_file "$@"
        ;;
      "-d" | "--debug")
        shift
        IS_DEBUG_MODE=true
        ;;
      "encrypt")
        encrypt_key $2 $3 $4
        ;;
      "-g" | "--global")
        SCOPE="global"
        ;;
      "-l" | "--local")
        SCOPE="local"
        ;;
      "language")
        set_language $2 $3
        ;;
      "--version")
        show_version
        ;;
      *)
        echo "Invalid command."
        ;;
    esac
    # Validate scope
    if [ "$scope" != "local" ] && [ "$scope" != "global" ]; then
      echo "Invalid scope: $scope"
      return 1
    fi
    display_debug_message "Scope: $SCOPE"
  else
    echo "Failed to create or check configuration file."
    return 1009
  fi
  display_debug_message "Exiting main function"
}

# Call main with all command line arguments
main "$@"