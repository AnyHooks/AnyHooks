#!/bin/bash
# Script: rc/anyhooks
# Author: Ricardo Malnati
# Creation Date: 2023-10-15
# Description: Manages hooks, encryption, and language settings for AnyHooks
# Dependencies: rc/openaikey, rc/anyhookslang, rc/anyhooksver

SRC=""

# Function to create the configuration file if it doesn't exist
create_config_file() {

  # OS-agnostic home directory
  HOME_DIR=$(eval echo ~$USER)

  CONFIG_FILE="$HOME_DIR/.anyhooksrc"
  if [ ! -f "$CONFIG_FILE" ]; then
    echo "#!/bin/bash" > "$CONFIG_FILE"
    echo "# Resource: rc/.anyhooksrc" > "$CONFIG_FILE"
    echo "# " > "$CONFIG_FILE"
    echo "# The default language is English or you can define any other " > "$CONFIG_FILE"
    echo "#   language name in English, for example Portuguese, " > "$CONFIG_FILE"
    echo "#   Spanish, French, Dutch, etc. It will affect the response of the OpenAPI.'" > "$CONFIG_FILE"
    echo "# " > "$CONFIG_FILE"
    echo "PREF_LANGUAGE=English" >> "$CONFIG_FILE"
    echo "OPENAI_SYSTEM_CONTENT=\"You are a helpful system programmed to generate a commit message based on git diff output. Please provide the commit message with maximun of 4096 characteres, in the prefered language.\"" >> "$CONFIG_FILE"
    echo "OPENAI_USER_CONTENT=\"Based on the following git diff output, identify and describe the changes to define the commit message.\"" >> "$CONFIG_FILE"
  fi
}

# Function to add hooks to the project
add_hook() {
  cp "$2/hooks/$1" "$2/.git/hooks/"
  echo "Hook $1 added to project at $2."
}

# Function to encrypt API keys
encrypt_key() {
  . "${SRC}anyhooksencrypt" $@
}

# Function to set language
set_language() {
  . "${SRC}anyhookslang" $@
}

# Function to show version
show_version() {
  . "${SRC}anyhooksver"
}

# Main function to handle parameters
main() {
  create_config_file  # Create the configuration file if it doesn't exist
  
  case $1 in
    "add")
      add_hook $2 $3
      ;;
    "config")
      create_config_file "$@"
      ;;
    "encrypt")
      encrypt_key $2 $3 $4
      ;;
    "language")
      set_language $2 $3
      ;;
    "--version")
      show_version
      ;;
    *)
      echo "Invalid command."
      ;;
  esac
}

# Call main with all command line arguments
main "$@"