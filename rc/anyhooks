#!/bin/bash
# Script: rc/anyhooks
# Author: Ricardo Malnati
# Creation Date: 2023-10-15
# Description: Manages hooks, encryption, and language settings for AnyHooks
# Dependencies: rc/anyhookscore, rc/anyhookslang, rc/anyhooksver, rc/anyhooksencrypt

source "${PWD}/anyhookscore"
source "${PWD}/anyhooksencrypt"
source "${PWD}/anyhooksdeploy"
source "${PWD}/anyhooksrc"
source "${PWD}/anyhooksver"

# Defines the debug state for this script, the flag come from --debug
ANYHOOKS_DEBUG_MODE=false

# Defines the scope for the current task
SCOPE='--global'

PROJECT_DIR=""

# Function to handle the --debug parameter
handle_debug_parameter() {
    while [[ $# -gt 0 ]]; do
        key="$1"
        if [[ "$key" == '-d' ]] || [[ "$key" == '--debug' ]]; then
            ANYHOOKS_DEBUG_MODE=true
            break
        else
            ANYHOOKS_DEBUG_MODE=false
            shift
        fi
    done
    echoDebugMsg true "Debug mode is: ${ANYHOOKS_DEBUG_MODE}"
}

# Main function to handle parameters
retrieve_parameters() {
  echoDebugMsg ${ANYHOOKS_DEBUG_MODE} "Entering ${FUNCNAME[0]} ${@}"
    while [[ $# -gt 0 ]]; do
      key="$1"
      echoDebugMsg ${ANYHOOKS_DEBUG_MODE} "Checking param: $key"
      case $key in
        '-a' | '--add')
          echoDebugMsg ${ANYHOOKS_DEBUG_MODE} 'add Taken parameters then shift shift'
          ACTION="$1"
          HOOK_SCRIPT="$2"
          shift
          shift
          ;;
        '-l' | '--local' | '-g' | '--global')
          echoDebugMsg ${ANYHOOKS_DEBUG_MODE} 'scope Taken parameters then shift'
          SCOPE="$1"
          shift
          ;;
        '-p' | '--project')
          echoDebugMsg ${ANYHOOKS_DEBUG_MODE} 'project Taken parameters then shift shift'
          PROJECT_DIR="$2"
          shift
          shift
          ;;
        '-r' | '--remove')
          echoDebugMsg ${ANYHOOKS_DEBUG_MODE} 'remove Taken parameters then shift shift'
          ACTION="$1"
          HOOK_SCRIPT="$2"
          shift
          shift
          ;;
        '-v' | '--version')
          echoDebugMsg ${ANYHOOKS_DEBUG_MODE} 'version Taken parameters then shift'
          ACTION="$1"
          shift
          ;;
        * )
          shift
          ;;
      esac
    done 
  echoDebugMsg ${ANYHOOKS_DEBUG_MODE} "Exiting ${FUNCNAME[0]} ${@}"
}

validate_parameters() {
  echoDebugMsg ${ANYHOOKS_DEBUG_MODE} "Entering ${FUNCNAME[0]} ${@}"
  validateRequiredString "${SCOPE}"
  if [[ "${ACTION}" =~ (-a|--add|-r|--remove) ]]; then
    validateRequiredString "${HOOK_SCRIPT}"
    if [ "${HOOK_SCRIPT}" != 'commit-msg' ]; then
      echoErrorMsg "Invalid hook script: ${HOOK_SCRIPT}"
    fi
    validateRequiredDirectoryExistence "${PROJECT_DIR}"
    validateRequiredDirectoryExistence "${PROJECT_DIR}/.git/hooks"
  fi
  echoDebugMsg "Found SCOPE ${SCOPE}, ACTION ${ACTION}, HOOK_SCRIPT ${HOOK_SCRIPT}, PROJECT_DIR ${PROJECT_DIR}"
  echoDebugMsg ${ANYHOOKS_DEBUG_MODE} "Exiting ${FUNCNAME[0]} ${@}"
}

run_functions() {
  echoDebugMsg ${ANYHOOKS_DEBUG_MODE} "Entering ${FUNCNAME[0]} ${@}"
  create_anyhooksrc "${SCOPE}" "${PROJECT_DIR}" # Create the configuration file if it doesn't exist
  if [ $? -eq 0 ]; then
    case "${ACTION}" in
      '-a' | '--add')
        add_hook "${HOOK_SCRIPT}" "${PROJECT_DIR}"
        ;;
      '-r' | '--remove')
        remove_hook "${HOOK_SCRIPT}" "${PROJECT_DIR}"
        ;;
      '-v' | '--version')
        show_version
        ;;
      *)
        echoDebugMsg "This is not a valid action ${ACTION}"
        ;;
    esac
  else
    echoErrorMsg 'Failed to create or check configuration file.'
  fi
  echoDebugMsg ${ANYHOOKS_DEBUG_MODE} "Exiting ${FUNCNAME[0]} ${@}"
}

# Call function to handle the --debug parameter
handle_debug_parameter $@
# Call retrieve_parameters with all command line arguments
retrieve_parameters $@
# Call validate_parameters 
validate_parameters
# Call run_functions with all command line arguments
run_functions $@