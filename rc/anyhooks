#!/bin/bash
# Script: rc/anyhooks
# Author: Ricardo Malnati
# Creation Date: 2023-10-15
# Description: Manages hooks, encryption, and language settings for AnyHooks
# Dependencies: rc/openaikey, rc/anyhookslang, rc/anyhooksver, rc/anyhooksdisplaymsg

source anyhooksdisplaymsg

# Defines the scope for the current task
SCOPE="global"

# OS-agnostic home directory
USER_HOME_DIR=$(eval echo ~$USER)

PROJECT_DIR=""

# Function to create the configuration file if it doesn't exist
create_configuration_file() {
  display_debug_message "Entering create_configuration_file function"
  # the default if not informed
  CONFIGURATION_FILE_PATH="${USER_HOME_DIR}/.anyhooksrc"
  case "$SCOPE" in
    "global") CONFIGURATION_FILE_PATH="${USER_HOME_DIR}/.anyhooksrc" ;;
    "local") CONFIGURATION_FILE_PATH="$PROJECT_DIR/.anyhooksrc" ;;
  esac
  if [ ! -f "$CONFIGURATION_FILE_PATH" ]; then
    echo "#!/bin/bash" > "$CONFIGURATION_FILE_PATH" && \
    echo "# Resource: rc/.anyhooksrc" >> "$CONFIGURATION_FILE_PATH" && \
    echo "# " >> "$CONFIGURATION_FILE_PATH" && \
    echo "# The default language is English or you can define any other " >> "$CONFIGURATION_FILE_PATH" && \
    echo "#   language name in English, for example Portuguese, " >> "$CONFIGURATION_FILE_PATH" && \
    echo "#   Spanish, French, Dutch, etc. It will affect the response of the OpenAPI.'" >> "$CONFIGURATION_FILE_PATH" && \
    echo "# " >> "$CONFIGURATION_FILE_PATH" && \
    echo "PREF_LANGUAGE=English" >> "$CONFIGURATION_FILE_PATH" && \
    echo "OPENAI_SYSTEM_CONTENT=\"You are a helpful system programmed to generate a commit message based on git diff output. Please provide the commit message with maximun of 4096 characteres, in the prefered language.\"" >> "$CONFIGURATION_FILE_PATH" && \
    echo "OPENAI_USER_CONTENT=\"Based on the following git diff output, identify and describe the changes to define the commit message.\"" >> "$CONFIGURATION_FILE_PATH"
    if [ $? -eq 0 ]; then
      display_log_message "Configuration file created successfully."
    else
      display_error_message "Unable to create the configuration file. Please ensure you have write permissions. Path [$CONFIGURATION_FILE_PATH]"
      return 1001
    fi
  else
    display_warning_message "Configuration file already exists."
  fi
  display_debug_message "Exiting create_configuration_file function"
}

# Function to check and encrypt API key file if it doesn't exist
check_encrypt_key_file() {
  display_debug_message "Entering check_encrypt_key_file function"
  ENCRYPTED_FILE="${USER_HOME_DIR}/.anyhooksopenapi.enc"
  display_debug_message "Confirming file [$ENCRYPTED_FILE]"
  if [ ! -f "$ENCRYPTED_FILE" ]; then
    display_debug_message "Project directory informed [$PROJECT_DIR] before encrypt_key function call"
    encrypt_key
    if [ $? -eq 0 ]; then
      display_debug_message "Project directory informed [$PROJECT_DIR] after encrypt_key function call"
      display_log_message "Encrypted API key file successfully created at $ENCRYPTED_FILE."
    else
      display_error_message "Unable to create the encrypted API key file. Please verify your encryption settings."
      return 1002
    fi
  else
    display_warning_message "Encrypted API key file already exists."
  fi
  display_debug_message "Exiting check_encrypt_key_file function"
}

# Function to deploy commit message
deploy_commit_msg() {
  display_debug_message "Entering deploy_commit_msg function"
  display_debug_message "Project directory informed [$PROJECT_DIR]"
  check_encrypt_key_file
  if [ $? -eq 0 ]; then
    display_debug_message "Project directory informed [$PROJECT_DIR] after check_encrypt_key_file"
    SCRIPT_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
    display_debug_message "Script directory retrieved [$SCRIPT_DIR]."
    if [ ! -d "${SCRIPT_DIR}" ]; then
      display_error_message "Invalid script directory: $SCRIPT_DIR"
      return 1014
    fi
    if [ ! -f "${SCRIPT_DIR}/commit-msg" ]; then
      display_error_message "File not found: ${SCRIPT_DIR}/commit-msg"
      return 1014
    fi
    if [ ! -d "${PROJECT_DIR}/.git/hooks/" ]; then
      display_error_message "Project directory not found: ${PROJECT_DIR}/.git/hooks/"
      return 1014
    fi
    cp "${SCRIPT_DIR}/commit-msg" "${PROJECT_DIR}/.git/hooks/"
    if [ $? -eq 0 ]; then
      display_log_message "Script hook commit-msg successfully deployed in $PROJECT_DIR."
    else
      display_error_message "Unable to deploy the commit message hook. Please check the project directory informed [$PROJECT_DIR]."
      return 1003
    fi
  else
    display_error_message "Failed to check or create encrypted API key file."
    return 1004
  fi
  display_debug_message "Exiting deploy_commit_msg function"
}

# Function to undeploy commit message
undeploy_commit_msg() {
  display_debug_message "Entering undeploy_commit_msg function"
  check_encrypt_key_file
  if [ $? -eq 0 ]; then
    mv "$PROJECT_DIR/.git/hooks/commit-msg" "$PROJECT_DIR/.git/hooks/commit-msg.removed"
    if [ $? -eq 0 ]; then
      display_log_message "Script hook commit-msg successfully undeployed in $PROJECT_DIR."
    else
      display_error_message "Unable to undeploy the commit message hook. Please check the project directory informed [$PROJECT_DIR]."
      return 1005
    fi
  else
    display_error_message "Failed to check or create encrypted API key file."
    return 1006
  fi
  display_debug_message "Exiting undeploy_commit_msg function"
}

# Function to add hooks to the project
add_hook() {
  display_debug_message "Entering add_hook function"
  if [[ "$HOOK_SCRIPT" =~ "commit-msg" ]]; then
    deploy_commit_msg 
    if [ $? -eq 0 ]; then
      display_log_message "Commit message deployed successfully."
    else
      display_error_message "Unable to deploy the commit message. Please review your hook settings."
      return 1007
    fi
  else
    display_error_message "Invalid command. [$HOOK_SCRIPT]"
    return 1008
  fi
  display_debug_message "Exiting add_hook function"
}

# Function to remove hooks from the project
remove_hook() {
  display_debug_message "Entering remove_hook function"
  if [[ "$HOOK_SCRIPT" =~ "commit-msg" ]]; then
    undeploy_commit_msg 
    if [ $? -eq 0 ]; then
      display_log_message "Commit message undeployed successfully."
    else
      display_error_message "Unable to undeploy the commit message. Please review your hook settings."
      return 1008
    fi
  else
    display_error_message "Invalid command. [$HOOK_SCRIPT]"
    return 1008
  fi
  display_debug_message "Exiting remove_hook function"
}

# Function to encrypt API keys
encrypt_key() {
  display_debug_message "Entering encrypt_key function"
  display_debug_message "Project directory informed [$PROJECT_DIR] before . anyhooksencrypt config $@"
  . "anyhooksencrypt" "config" $@
  if [ $? -eq 0 ]; then
    display_log_message "API keys encrypted successfully."
  else
    display_error_message "Unable to encrypt API keys. Please verify your encryption parameters."
    return 1009
  fi
  display_debug_message "Exiting encrypt_key function"
}

# Function to set language
set_language() {
  display_debug_message "Entering set_language function"
  . "anyhookslang" $@
  if [ $? -eq 0 ]; then
    display_log_message "Language set successfully."
  else
    display_error_message "Unable to set the language. Please ensure the language is supported."
    return 1010
  fi
  display_debug_message "Exiting set_language function"
}

# Function to show version
show_version() {
  display_debug_message "Entering show_version function"
  . "anyhooksver"
  if [ $? -eq 0 ]; then
    display_log_message "Version displayed successfully."
  else
    display_error_message "Unable to display the version. Please check your version settings."
    return 1011
  fi
  display_debug_message "Exiting show_version function"
}

# Main function to handle parameters
retrieve_parameters() {
  display_debug_message "Entering retrieve_parameters function"
    while [[ $# -gt 0 ]]; do
      key="$1"
      case $key in
        "-a" | "--add")
          ACTION="$1"
          HOOK_SCRIPT="$2"
          HOOK=true
          shift
          shift
          display_debug_message "--add) Taken parameters: [ACTION=$ACTION, HOOK_SCRIPT=$HOOK_SCRIPT] then shift shift ($@)"
          ;;
        "-d" | "--debug")
          IS_DEBUG_MODE=true
          shift
          display_debug_message "--debug) Taken parameters: [IS_DEBUG_MODE=$IS_DEBUG_MODE] then shift ($@)"
          ;;
        "-g" | "--global")
          SCOPE="$1"
          shift
          display_debug_message "--global) Taken parameters: [SCOPE=$SCOPE] then shift ($@)"
          ;;
        "-l" | "--local")
          SCOPE="$1"
          shift
          display_debug_message "--global) Taken parameters: [SCOPE=$SCOPE] then shift ($@)"
          ;;
        "-p" | "--project")
          PROJECT_DIR="$2"
          shift
          shift
          display_debug_message "--project) Taken parameters: [PROJECT_DIR $PROJECT_DIR] then shift shift ($@)"
          ;;
        "r" | "--remove")
          ACTION="$1"
          HOOK_SCRIPT="$2"
          HOOK=true
          remove_hook
          shift
          shift
          display_debug_message "--remove) Taken parameters: [ACTION=$ACTION, HOOK_SCRIPT=$HOOK_SCRIPT] then shift shift ($@)"
          ;;
        "-v" | "--version")
          shift
          display_debug_message "--version) Taken parameters: [$key] then shift ($@)"
          ;;
        *)
          display_error_message "Invalid command. [$key]"
          return 1012
          ;;
      esac
    done 
  display_debug_message "Exiting retrieve_parameters function"
}

validate_parameters() {
  display_debug_message "Entering validate_parameters function"
    # Validate scope
    if [ "$SCOPE" != "local" ] && [ "$SCOPE" != "global" ]; then
      display_error_message "Invalid scope: $SCOPE"
      exit 1013
    fi
    display_debug_message "Scope: $SCOPE"
    # Validate project path
    if [ ! -d "${PROJECT_DIR}/.git/hooks" ]; then
      display_error_message "Invalid project directory: $PROJECT_DIR"
      exit 1014
    fi
    display_debug_message "Project directory: $PROJECT_DIR"
    # Validate scope
    if [ $HOOK == true ] && [ "$HOOK_SCRIPT" != "commit-msg" ]; then
      display_error_message "Invalid hook script: $HOOK_SCRIPT"
      exit 1015
    fi
    display_debug_message "Hook script: $HOOK_SCRIPT"
  display_debug_message "Exiting validate_parameters function"
}

run_functions() {
  display_debug_message "Entering run_functions function"
  create_configuration_file  # Create the configuration file if it doesn't exist
  if [ $? -eq 0 ]; then
    case $ACTION in
      "-a" | "--add")
        HOOK=true
        HOOK_SCRIPT="$2"
        add_hook
        ;;
      "r" | "--remove")
        HOOK=true
        HOOK_SCRIPT="$1"
        remove_hook
        ;;
      "-v" | "--version")
        show_version
        ;;
      *)
        display_error_message "Invalid command. [$ACTION]"
        exit 1016
        ;;
    esac
  else
    display_error_message "Failed to create or check configuration file."
    return 1014
  fi
  display_debug_message "Exiting run_functions function"
}

# Call retrieve_parameters with all command line arguments
retrieve_parameters "$@"
# Call validate_parameters 
validate_parameters
# Call run_functions with all command line arguments
run_functions "$@"

